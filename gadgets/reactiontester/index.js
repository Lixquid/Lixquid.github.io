(function() {
  var activeTimer, bestTime, eAverage, eBest, eCount, eReset, eSpeed, reactTime, state, testCount, times;

  eSpeed = document.getElementById("output--speed");

  eAverage = document.getElementById("output--average");

  eBest = document.getElementById("output--best");

  eCount = document.getElementById("output--count");

  eReset = document.getElementById("input--reset");

  state = 0;

  reactTime = null;

  activeTimer = null;

  testCount = 1;

  times = [];

  bestTime = 2e308;

  document.getElementById("react--act").addEventListener("click", function() {
    var t;
    if (state === 0) {
      state = 1;
      this.classList.remove("btn-primary");
      this.classList.add("btn-secondary");
      this.textContent = "Wait for it..";
      activeTimer = setTimeout((function(_this) {
        return function() {
          if (state === 0) {
            return;
          }
          state = 2;
          reactTime = new Date;
          _this.classList.remove("btn-secondary");
          _this.classList.add("btn-success");
          return _this.textContent = "React!";
        };
      })(this), Math.random() * 2000 + 1000);
    } else if (state === 1) {
      state = 0;
      this.classList.remove("btn-secondary");
      this.classList.add("btn-primary");
      this.textContent = "Try Again";
      eSpeed.value = "Too soon!";
      testCount++;
      clearTimeout(activeTimer);
    } else if (state === 2) {
      state = 0;
      this.classList.remove("btn-success");
      this.classList.add("btn-primary");
      this.textContent = "Again";
      t = new Date - reactTime;
      times.push(t);
      bestTime = Math.min(bestTime, t);
      eSpeed.value = t;
      eBest.value = bestTime;
      testCount++;
      eAverage.value = Math.floor(times.reduce(function(a, b) {
        return a + b;
      }) / times.length);
      eReset.disabled = false;
    }
    return eCount.value = testCount;
  });

  eReset.addEventListener("click", function() {
    this.disabled = true;
    bestTime = 2e308;
    times = [];
    eBest.value = "";
    eAverage.value = "";
    testCount = 1;
    return eCount.value = testCount;
  });

}).call(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FkZ2V0cy9yZWFjdGlvbnRlc3Rlci9pbmRleC5qcyIsInNvdXJjZXMiOlsiZ2FkZ2V0cy9yZWFjdGlvbnRlc3Rlci9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQUEsR0FBUyxRQUFRLENBQUMsY0FBVCxDQUF3QixlQUF4Qjs7RUFDVCxRQUFBLEdBQVcsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsaUJBQXhCOztFQUNYLEtBQUEsR0FBUSxRQUFRLENBQUMsY0FBVCxDQUF3QixjQUF4Qjs7RUFDUixNQUFBLEdBQVMsUUFBUSxDQUFDLGNBQVQsQ0FBd0IsZUFBeEI7O0VBQ1QsTUFBQSxHQUFTLFFBQVEsQ0FBQyxjQUFULENBQXdCLGNBQXhCOztFQUdULEtBQUEsR0FBUTs7RUFDUixTQUFBLEdBQVk7O0VBQ1osV0FBQSxHQUFjOztFQUNkLFNBQUEsR0FBWTs7RUFDWixLQUFBLEdBQVE7O0VBQ1IsUUFBQSxHQUFXOztFQUVYLFFBQVEsQ0FBQyxjQUFULENBQXlCLFlBQXpCLENBQXVDLENBQUMsZ0JBQXhDLENBQXlELE9BQXpELEVBQWtFLFNBQUE7QUFDakUsUUFBQTtJQUFBLElBQUcsS0FBQSxLQUFTLENBQVo7TUFDQyxLQUFBLEdBQVE7TUFDUixJQUFDLENBQUEsU0FBUyxDQUFDLE1BQVgsQ0FBa0IsYUFBbEI7TUFDQSxJQUFDLENBQUEsU0FBUyxDQUFDLEdBQVgsQ0FBZSxlQUFmO01BQ0EsSUFBQyxDQUFBLFdBQUQsR0FBZTtNQUNmLFdBQUEsR0FBYyxVQUFBLENBQVksQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO1VBQ3pCLElBQVUsS0FBQSxLQUFTLENBQW5CO0FBQUEsbUJBQUE7O1VBQ0EsS0FBQSxHQUFRO1VBQ1IsU0FBQSxHQUFZLElBQUk7VUFDaEIsS0FBQyxDQUFBLFNBQVMsQ0FBQyxNQUFYLENBQWtCLGVBQWxCO1VBQ0EsS0FBQyxDQUFBLFNBQVMsQ0FBQyxHQUFYLENBQWUsYUFBZjtpQkFDQSxLQUFDLENBQUEsV0FBRCxHQUFlO1FBTlU7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVosRUFPWixJQUFJLENBQUMsTUFBTCxDQUFBLENBQUEsR0FBZ0IsSUFBaEIsR0FBdUIsSUFQWCxFQUxmO0tBQUEsTUFhSyxJQUFHLEtBQUEsS0FBUyxDQUFaO01BQ0osS0FBQSxHQUFRO01BQ1IsSUFBQyxDQUFBLFNBQVMsQ0FBQyxNQUFYLENBQWtCLGVBQWxCO01BQ0EsSUFBQyxDQUFBLFNBQVMsQ0FBQyxHQUFYLENBQWUsYUFBZjtNQUNBLElBQUMsQ0FBQSxXQUFELEdBQWU7TUFDZixNQUFNLENBQUMsS0FBUCxHQUFlO01BQ2YsU0FBQTtNQUNBLFlBQUEsQ0FBYyxXQUFkLEVBUEk7S0FBQSxNQVFBLElBQUcsS0FBQSxLQUFTLENBQVo7TUFDSixLQUFBLEdBQVE7TUFDUixJQUFDLENBQUEsU0FBUyxDQUFDLE1BQVgsQ0FBa0IsYUFBbEI7TUFDQSxJQUFDLENBQUEsU0FBUyxDQUFDLEdBQVgsQ0FBZSxhQUFmO01BQ0EsSUFBQyxDQUFBLFdBQUQsR0FBZTtNQUNmLENBQUEsR0FBSSxJQUFJLElBQUosR0FBVztNQUNmLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBWDtNQUNBLFFBQUEsR0FBVyxJQUFJLENBQUMsR0FBTCxDQUFVLFFBQVYsRUFBb0IsQ0FBcEI7TUFFWCxNQUFNLENBQUMsS0FBUCxHQUFlO01BQ2YsS0FBSyxDQUFDLEtBQU4sR0FBYztNQUNkLFNBQUE7TUFDQSxRQUFRLENBQUMsS0FBVCxHQUFpQixJQUFJLENBQUMsS0FBTCxDQUNoQixLQUFLLENBQUMsTUFBTixDQUFjLFNBQUUsQ0FBRixFQUFLLENBQUw7ZUFBWSxDQUFBLEdBQUk7TUFBaEIsQ0FBZCxDQUFBLEdBQW9DLEtBQUssQ0FBQyxNQUQxQjtNQUVqQixNQUFNLENBQUMsUUFBUCxHQUFrQixNQWRkOztXQWdCTCxNQUFNLENBQUMsS0FBUCxHQUFlO0VBdENrRCxDQUFsRTs7RUF3Q0EsTUFBTSxDQUFDLGdCQUFQLENBQXdCLE9BQXhCLEVBQWlDLFNBQUE7SUFDaEMsSUFBQyxDQUFBLFFBQUQsR0FBWTtJQUNaLFFBQUEsR0FBVztJQUNYLEtBQUEsR0FBUTtJQUNSLEtBQUssQ0FBQyxLQUFOLEdBQWM7SUFDZCxRQUFRLENBQUMsS0FBVCxHQUFpQjtJQUNqQixTQUFBLEdBQVk7V0FDWixNQUFNLENBQUMsS0FBUCxHQUFlO0VBUGlCLENBQWpDO0FBdERBIiwic291cmNlc0NvbnRlbnQiOlsiZVNwZWVkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJvdXRwdXQtLXNwZWVkXCJcbmVBdmVyYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJvdXRwdXQtLWF2ZXJhZ2VcIlxuZUJlc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcIm91dHB1dC0tYmVzdFwiXG5lQ291bnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCBcIm91dHB1dC0tY291bnRcIlxuZVJlc2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJpbnB1dC0tcmVzZXRcIlxuXG4jIDA6IE5vdCBydW5uaW5nLCAxOiBQcmUsIDI6IFJlYWN0XG5zdGF0ZSA9IDBcbnJlYWN0VGltZSA9IG51bGxcbmFjdGl2ZVRpbWVyID0gbnVsbFxudGVzdENvdW50ID0gMVxudGltZXMgPSBbXVxuYmVzdFRpbWUgPSBJbmZpbml0eVxuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCggXCJyZWFjdC0tYWN0XCIgKS5hZGRFdmVudExpc3RlbmVyIFwiY2xpY2tcIiwgLT5cblx0aWYgc3RhdGUgPT0gMFxuXHRcdHN0YXRlID0gMVxuXHRcdEBjbGFzc0xpc3QucmVtb3ZlIFwiYnRuLXByaW1hcnlcIlxuXHRcdEBjbGFzc0xpc3QuYWRkIFwiYnRuLXNlY29uZGFyeVwiXG5cdFx0QHRleHRDb250ZW50ID0gXCJXYWl0IGZvciBpdC4uXCJcblx0XHRhY3RpdmVUaW1lciA9IHNldFRpbWVvdXQoID0+XG5cdFx0XHRyZXR1cm4gaWYgc3RhdGUgPT0gMFxuXHRcdFx0c3RhdGUgPSAyXG5cdFx0XHRyZWFjdFRpbWUgPSBuZXcgRGF0ZVxuXHRcdFx0QGNsYXNzTGlzdC5yZW1vdmUgXCJidG4tc2Vjb25kYXJ5XCJcblx0XHRcdEBjbGFzc0xpc3QuYWRkIFwiYnRuLXN1Y2Nlc3NcIlxuXHRcdFx0QHRleHRDb250ZW50ID0gXCJSZWFjdCFcIlxuXHRcdCwgTWF0aC5yYW5kb20oKSAqIDIwMDAgKyAxMDAwIClcblx0ZWxzZSBpZiBzdGF0ZSA9PSAxXG5cdFx0c3RhdGUgPSAwXG5cdFx0QGNsYXNzTGlzdC5yZW1vdmUgXCJidG4tc2Vjb25kYXJ5XCJcblx0XHRAY2xhc3NMaXN0LmFkZCBcImJ0bi1wcmltYXJ5XCJcblx0XHRAdGV4dENvbnRlbnQgPSBcIlRyeSBBZ2FpblwiXG5cdFx0ZVNwZWVkLnZhbHVlID0gXCJUb28gc29vbiFcIlxuXHRcdHRlc3RDb3VudCsrXG5cdFx0Y2xlYXJUaW1lb3V0KCBhY3RpdmVUaW1lciApXG5cdGVsc2UgaWYgc3RhdGUgPT0gMlxuXHRcdHN0YXRlID0gMFxuXHRcdEBjbGFzc0xpc3QucmVtb3ZlIFwiYnRuLXN1Y2Nlc3NcIlxuXHRcdEBjbGFzc0xpc3QuYWRkIFwiYnRuLXByaW1hcnlcIlxuXHRcdEB0ZXh0Q29udGVudCA9IFwiQWdhaW5cIlxuXHRcdHQgPSBuZXcgRGF0ZSAtIHJlYWN0VGltZVxuXHRcdHRpbWVzLnB1c2ggdFxuXHRcdGJlc3RUaW1lID0gTWF0aC5taW4oIGJlc3RUaW1lLCB0IClcblxuXHRcdGVTcGVlZC52YWx1ZSA9IHRcblx0XHRlQmVzdC52YWx1ZSA9IGJlc3RUaW1lXG5cdFx0dGVzdENvdW50Kytcblx0XHRlQXZlcmFnZS52YWx1ZSA9IE1hdGguZmxvb3IoXG5cdFx0XHR0aW1lcy5yZWR1Y2UoICggYSwgYiApIC0+IGEgKyBiICkgLyB0aW1lcy5sZW5ndGggKVxuXHRcdGVSZXNldC5kaXNhYmxlZCA9IGZhbHNlXG5cblx0ZUNvdW50LnZhbHVlID0gdGVzdENvdW50XG5cbmVSZXNldC5hZGRFdmVudExpc3RlbmVyIFwiY2xpY2tcIiwgLT5cblx0QGRpc2FibGVkID0gdHJ1ZVxuXHRiZXN0VGltZSA9IEluZmluaXR5XG5cdHRpbWVzID0gW11cblx0ZUJlc3QudmFsdWUgPSBcIlwiXG5cdGVBdmVyYWdlLnZhbHVlID0gXCJcIlxuXHR0ZXN0Q291bnQgPSAxXG5cdGVDb3VudC52YWx1ZSA9IHRlc3RDb3VudFxuIl19
